#! /usr/bin/env ruby
oldwd = Dir.pwd
Dir.chdir(File.dirname(File.expand_path($0)))
$:.unshift('./lib')

require 'app'
require 'app/run'
require 'permission'

if %w'-h --help'.any?{|x| $*.delete(x)} || $*.size < 1
  print <<"EOM"
Usage: #{$0} [--help] <user> [algorithm=<algorithm>]
EOM
  exit
end

Dir.chdir(oldwd){ Permission.ensure_writable(App::DB.to_s) }

u = $*.shift
algo = $*.shift

exit(App.run(u)) unless algo # calculate all
algo = algo.to_sym

require 'fileutils'
require 'store'
require 'job/queue'
require 'job/queue/watch_status'
require 'hatena/bookmark'
require 'algorithm'
require 'progress'

require 'mapper/result/truncate'
require 'reducer/user/partial_information'
require 'reducer/user/other_entries'

user = Hatena::Bookmark::User.new(u)
path = App::Path.new(u, algo)

FileUtils.mkdir_p(path.dir)
lock = Store.new(path.lock)
pid = lock.transaction do |db|
  db[:lock].tap{|pid| db[:lock] = Process.pid unless pid}
end
if pid
  STDERR.puts("There is running batch process PID #{pid}")
  exit
end

queue = Job::Queue.new(path.db.queue, path.db.result)

# clean
[ path.db.queue,
  path.db.result,
  path.db.status,
  queue.runner_manager_path,
  path.result,
  path.entry,
].each{|f| FileUtils.rm(f) if File.exist?(f)}

# status logger
status_db = path.db.status
task = Progress::Diff.new
$task = Progress::Store.new(Store.new(status_db), 'task', task)
phase = Progress.new((MapReduce::SET[algo].size+1)*2)
$phase = Progress::Store.new(Store.new(status_db), 'phase', phase)

if !ENV['DEBUG'] && STDERR.tty?
  len = 0
  watcher = queue.watch_status do |size|
    $task.set!(size)
    len = [ size.to_s.length, len ].max
    STDERR.print("\r#{size}#{' '*(len-size.to_s.length)}")
    STDERR.flush
  end
end

module MapReduce
  if !ENV['DEBUG'] && STDERR.tty?
    def show_status(emitter)
      kind = ''
      kind = 'M: ' if emitter.is_a?(Mapper)
      kind = 'R: ' if emitter.is_a?(Reducer)
      $phase.msg!(kind+emitter.to_s)
      STDERR.puts("\r"+kind+emitter.to_s) if emitter
    end
  else
    def show_status(emitter) $phase.msg!(emitter.to_s) end
  end

  def next_phase(&block)
    r = block.call
    $phase.inc!
    $task.clear!
    return r
  end

  module_function :show_status, :next_phase

  if App::MAP_REDUCE == :sequential
    class Runner < Sequential
      def self.start(queue, &block)
        Job::Runner.start(queue) do |x|
          block.call(self.new)
        end
      end

      def emit(emitter, args)
        MapReduce.next_phase do
          MapReduce.show_status(emitter)
          super(emitter, args)
        end
      end
    end
  else
    class Runner < JobQueue
      def emit(emitter, args)
        MapReduce.next_phase do
          MapReduce.show_status(emitter)
          r = super(emitter, args)
        end
      end
    end
  end
end

begin
  MapReduce::Runner.start(queue) do |runner|
    algorithm = Algorithm.new(algo)
    ctx = algorithm.context.merge(:user => u)
    value = [[ nil, user ]]

    # main map/reduce process

    MapReduce::SET[algo].each do |set|
      mapper = algorithm.mapper(set[:map], ctx)
      value = runner.map(mapper, value)

      reducers = set[:reduce]
      reducers = [ reducers ] unless reducers.is_a?(Array)
      reducers = reducers.map{|r| algorithm.reducer(r, ctx)}.inject{|r,x|r+x}
      value = runner.reduce(reducers, value)
    end

    # retrieve some extra information of top N users

    mapper = algorithm.mapper(:Truncate, ctx)
    value = runner.map(mapper, [[ nil, value.map{|k,v|[k, v.first.value]} ]])

    reducers =
      [ :PartialInformation,
        :OtherEntries,
      ].map{|r| algorithm.reducer(r, ctx)}.inject{|r,x|r+x}
    value = runner.reduce(reducers, value)

    value = value.map{|k,v|[k, v.first.value]}.sort do |a,b|
      b[1][:score] <=> a[1][:score]
    end.map do |k,v|
      s = App.round(v[:score])
      o = v[:order] && App.round(v[:order])
      v.merge(:user => k, :score => s, :order => o)
    end
    entries = {}
    other_entries = {}
    value.each do |x|
      other_entries[x[:user]] = x[:other_entries].map do |e|
        entries[e[:eid]] = {
          :uri => e[:uri], :title => e[:title], :users => e[:users]
        }
        e[:eid]
      end
    end

    # output

    puts
    result = value.map do |x|
      uname = (x[:user]+':').ljust(20,' ')
      score = x[:score].to_s.rjust(8,' ')
      eids = x[:eid].map{|e| (x[:eeid]||[]).include?(e) ? "*#{e}" : e.to_s}
      puts("#{uname}#{score}    #{eids.join(',')}")

      x[:eid].each do |eid|
        unless entries[eid]
          entry = Hatena::Bookmark::Entry.new(:eid => eid)
          entries[eid] = {
            :uri   => entry.uri,
            :title => entry.title,
            :users => entry.users.size,
          }
        end
      end

      order = x[:order]
      order = "#{order*100}%" if order && order < 1.0
      activity = x[:activity] || 0

      { :user  => x[:user],
        :order => order,
        :eid   => x[:eid],
        :eeid  => x[:eeid],
        :oeid  => other_entries[x[:user]],
        :score => x[:score],
        :activity => App.round(activity),
      }
    end

    open(path.result, 'w'){|io| io.puts(result.to_json)}
    open(path.entry, 'w'){|io| io.puts(entries.to_json)}
  end
ensure
  watcher.stop if watcher
  STDERR.puts
  lock.transaction{|db| db[:lock] = false}
  queue.runner_manager.notify_status(0)
end
